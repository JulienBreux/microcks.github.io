<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Installing on Microcks.io</title>
    <link>https://microcks.io/documentation/installing/</link>
    <description>Recent content in Installing on Microcks.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://microcks.io/documentation/installing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing on Kubernetes</title>
      <link>https://microcks.io/documentation/installing/kubernetes/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://microcks.io/documentation/installing/kubernetes/</guid>
      <description>Instructions One easy way if installing Microcks is to do it on Kubernetes. Kubernetes in version 1.6 or greater is required. It is assumed that you have some kind of Kubernetes cluster up and running available. This can take several forms depending on your environment and needs:
 Lightweight Minikube on your laptop, see Minikube project page, Google Cloud Engine account in the cloud, see how to start a Free trial, Any other Kubernetes distribution provider.</description>
    </item>
    
    <item>
      <title>Installing with Kubernetes Operator</title>
      <link>https://microcks.io/documentation/installing/operator/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://microcks.io/documentation/installing/operator/</guid>
      <description>Overview Operators are next-gen installer, maintainer and life-cycle manager for Kubernetes native applications. Operators are Kubernetes native piece of software (aka Kube controller) that manage specific Custom Resources defining their domain of expertise. Microcks provide an Operator that was developed using the Operator Framework SDK and that is distributed through OperatorHub.io.
At time of writing, Microcks only define one cutomer resource that is called the MicrocksInstall: a description of the instance configuration you want to deploy.</description>
    </item>
    
    <item>
      <title>Installing with OpenShift templates</title>
      <link>https://microcks.io/documentation/installing/openshift/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://microcks.io/documentation/installing/openshift/</guid>
      <description>Warning OpenShift Templates support has been removed since Microcks 1.1.0 release. Whilst being convenient, teamplates are a burden to maintain and we now have more robusts, easy-to-use installation process using Helm Charts or Microcks Operator. Though we recommend swithing to these methods. OpenShift Templates can still be found under 1.0.0 tag in the GitHub repository. We&amp;rsquo;ll keep this page here intentionally for a few months.
 Instructions The easiest way of installing Microcks for production use in most secured conditions is to do it on OpenShift.</description>
    </item>
    
    <item>
      <title>Installing with docker-compose</title>
      <link>https://microcks.io/documentation/installing/docker-compose/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://microcks.io/documentation/installing/docker-compose/</guid>
      <description>Docker Compose is a tool for easily test and run multi-container applications. Microcks offers a simple way to set up the minimal required containers to have a functional environment in your local computer.
Usage To get started, make sure you have Docker installed on your system.
In your terminal issue the following commands:
  Clone this repository.
git clone https://github.com/microcks/microcks.git   Change to the install folder
cd microcks/install/docker-compose   Spin up the containers</description>
    </item>
    
    <item>
      <title>Architecture and deployment options</title>
      <link>https://microcks.io/documentation/installing/deployment-options/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://microcks.io/documentation/installing/deployment-options/</guid>
      <description>Introduction Now that you have probably gone thorugh the different installation methods of Microcks, you would may want to have a high-level view of its architecture and deployment options. This page will go through these topics, exposeing the different choices and options you may have depending on your target environment.
High-level Architecture As its simplest form, Microcks architecture is made of 4 components that are:
 The Microcks main web application (also called webapp) that holds the UI resources as well as API endpoints, Its associated MongoDB database for holding your data such as repository of API | Services and Tests, A Microcks Postman runtime (microcks-postman-runtime) that allow the execution of Postman Collection tests and calls back Microcks for storing results, A Keycloak instance that holds the authentication mechanisms and identity provider integration.</description>
    </item>
    
  </channel>
</rss>